# -*- coding: utf-8 -*-
"""DigitRecognizer.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/149_-4guTkO2Vzex8bjA402nPcJ_Z7G7W

#***Digit Recognizer(MNIST) dataset using CNN***
"""

import numpy as np
import pandas as  pd
import matplotlib.pyplot as plt
import zipfile

zip=zipfile.ZipFile('train.csv (2).zip')
zip.extractall()

df=pd.read_csv('train.csv')
df=df.dropna(how='any')
df

df['label'].unique()

y = df["label"]
X = df.drop(labels=["label"],axis=1)

X

y

X = X / 255.0

X

X = X.values.reshape(-1,28,28,1)

X

from tensorflow.keras.utils import to_categorical 
y = to_categorical(y, 10)

y

from sklearn.model_selection import train_test_split
X_train, X_val, Y_train, Y_val = train_test_split(X, y, test_size = 0.25, random_state=42)

print("x_train shape",X_train.shape)
print("x_val shape",X_val.shape)
print("y_train shape",Y_train.shape)
print("y_val shape",Y_val.shape)

from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Conv2D
from tensorflow.keras.layers import MaxPooling2D
from tensorflow.keras.layers import Flatten
from tensorflow.keras.layers import Dense
from tensorflow.keras.layers import BatchNormalization
from tensorflow.keras.layers import Dropout
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras.optimizers import SGD

model = Sequential()
model.add(Conv2D(32, (3, 3), activation='relu', kernel_initializer='he_uniform', input_shape=(28, 28, 1)))
model.add(BatchNormalization())
model.add(MaxPooling2D((2, 2)))
model.add(Flatten())
model.add(Dense(100, activation='relu', kernel_initializer='he_uniform'))
model.add(BatchNormalization())
model.add(Dense(10, activation='softmax'))
opt = SGD(lr=0.01, momentum=0.9)

model.compile(optimizer=opt,loss='categorical_crossentropy',metrics=['accuracy'])

datagen = ImageDataGenerator(
        featurewise_center=False,  
        samplewise_center=False, 
        featurewise_std_normalization=False,  
        samplewise_std_normalization=False,  
        zca_whitening=False, 
        rotation_range=5,  
        zoom_range = 0.1, 
        width_shift_range=0.1,  
        height_shift_range=0.1,  
        horizontal_flip=False,  
        vertical_flip=False)  

datagen.fit(X_train)

model.fit(datagen.flow(X_train,Y_train, batch_size=20), validation_data = (X_val,Y_val),epochs = 1, steps_per_epoch=X_train.shape[0] )
model.save('DR.h5')

print("Accuracy of the model is --> " , model.evaluate(X_val, Y_val, batch_size=20)[1]*100 , "%")
print("Loss of the model is --> " , model.evaluate(X_val, Y_val, batch_size=20)[0])

"""#***Testing the model***"""

zip=zipfile.ZipFile('test.csv.zip')
zip.extractall()

from tensorflow.keras.models import load_model
model=load_model('DR.h5')
print("loaded model from disk")

test=pd.read_csv('test.csv')
test=test.dropna(how='any')
test

X_test = test / 255.0

X_test = X_test.values.reshape(-1,28,28,1)

X_test

labels = model.predict(X_test)

labels = np.argmax(labels, axis=1)

len(labels)

ss = pd.read_csv("sample_submission.csv")
ss.head()

index = test.index.values + 1
data = {'ImageId' : index, "Label" : labels}
df = pd.DataFrame(data=data)
df.head()

df.to_csv('submission.csv', index=False)

df

final = pd.DataFrame({'ImageId' : index, "Label" : labels.astype(int).ravel()})
final.to_csv("final_submission.csv",index = False)